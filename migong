public class Migong {
  public static void main(String[] args) {
      //化繁为简思路分析
      //1.创建迷宫，用二维数组表示
      //2.先规定map数组的元素值，0表示可以走，1表示障碍物
      int[][] map = new int[8][7];
      //3.将最上面的一行和最下面一行设置为1
      for(int i = 0;i < 7;i++){
          map[0][i] = 1;
          map[7][i] = 1;
      }
     //4.将最左面的一列和最右面一列设置为1
     for(int i = 0;i < 8;i++){
         map[i][0] = 1;
         map[i][6] = 1;
     }
     map[3][1] = 1;
     map[3][2] = 1;
     map[2][2] = 1;//测试回溯
      //输出当前地图
      for(int i = 0;i < map.length;i++){
          for(int j = 0;j < map[i].length;j++){
              System.out.print(map[i][j]+" ");
          }
          System.out.println();
      }
      C c1 = new C();
      c1.findway(map,1,1);
      System.out.println("\n=====找路的情况如下=====");
      for(int i = 0;i < map.length;i++){
          for(int j = 0;j < map[i].length;j++){
              System.out.print(map[i][j]+" ");
          }
          System.out.println();
      }
  }
}
class C{
    //化繁为简思路分析
    //1.findway方法就是专门来找出迷宫路径
   // 2.如果找到就返回true否则返回false
   //3.map是二维数组即迷宫
   //4.i,j就是老鼠的位置，初始化位置(1,1)
   //5.因为我们是递归找路，所以先规定map数组各个元素的含义
   //0表示可以走1表示障碍物2表示走得通走过3表示走过走不通
   //6.map[6][5]=2就说明找到通路，就结束，否则继续找
   //7.先确定老鼠找路策略下->右→上->左
   public boolean findway(int[][] map,int i,int j){
       if(map[6][5] == 2){//说明已经找到
           return true;
       }else{
           if(map[i][j] == 0){
               //假定可以走通
               map[i][j] = 2;
               //使用找路策略，来确定该位置是否真的能走通
               //上->右→下->左
               if(findway(map,i + 1,j)){//先走下
                   return true;
               }else if(findway(map,i,j + 1)){//右
                   return true;
               }else if(findway(map,i - 1,j)){//上
                   return true;
               }else if(findway(map,i,j - 1)){// 左
                   return true;
               }else{
                   map[i][j] = 3;
                   return false;
                   
               }
           }else{//map[i][j]=1,2,3
               return false;
           }
       }
   }
   //修改找路策略
   //上->右→下->左
  public boolean findway2(int[][] map,int i,int j){
       if(map[6][5] == 2){//说明已经找到
           return true;
       }else{
           if(map[i][j] == 0){
               //假定可以走通
               map[i][j] = 2;
               //使用找路策略，来确定该位置是否真的能走通
               //下->右→上->左
               if(findway2(map,i - 1,j)){//先走上
                   return true;
               }else if(findway2(map,i,j + 1)){//右
                   return true;
               }else if(findway2(map,i + 1,j)){//下
                   return true;
               }else if(findway2(map,i,j - 1)){// 左
                   return true;
               }else{
                   map[i][j] = 3;
                   return false;
                   
               }
           }else{
               return false;
           }
       }
   }
}
